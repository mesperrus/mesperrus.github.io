{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["library","add","faGithub","faLinkedinIn","faInstagram","App","document","title","basename","path","React","Component","NavigationBar","className","to","target","rel","href","SocialBar","this","props","isOpen","onClose","message","icon","size","About","window","innerWidth","Experience","Portfolio","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAeAA,IAAQC,IAAIC,IAAUC,IAAcC,K,IAEfC,E,4LAEjBC,SAASC,MAAQ,e,+BAIjB,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,a,GAhBqBC,IAAMC,WAwBjCC,E,iLAEF,OACE,yBAAKC,UAAU,cACb,kBAAC,IAAD,CAAMA,UAAU,oCAAoCC,GAAG,KAAvD,SACA,kBAAC,IAAD,CAAMD,UAAU,oCAAoCC,GAAG,eAAvD,cACA,kBAAC,IAAD,CAAMD,UAAU,oCAAoCC,GAAG,cAAvD,aACA,uBACED,UAAU,oCACVE,OAAO,SACPC,IAAI,sBACJC,KAAK,sEAJP,e,GAPoBP,IAAMC,WAkB5BO,E,iLACM,IAAD,EAC8BC,KAAKC,MADnC,EACCC,OADD,EACSC,QADT,EACkBC,QACzB,OACE,yBAAKV,UAAU,cACb,uBAAGI,KAAK,iCACN,kBAAC,IAAD,CACEO,KAAM,CAAC,MAAO,UACdC,KAAK,KACLZ,UAAU,yCAGd,uBAAGI,KAAK,qDACN,kBAAC,IAAD,CACEO,KAAM,CAAC,MAAO,eACdC,KAAK,KACLZ,UAAU,yCAGd,uBAAGI,KAAK,yCACN,kBAAC,IAAD,CACEO,KAAM,CAAC,MAAO,aACdC,KAAK,KACLZ,UAAU,8C,GAvBEH,IAAMC,WA+BxBe,E,iLAEeC,OAAOC,WAQxB,OACE,yBAAKf,UAAU,oBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,wBAAIA,UAAU,qBAAd,eAEF,uBAAGA,UAAU,QAAb,mHAKA,uBAAGA,UAAU,QAAb,kVAUA,kBAAC,EAAD,Y,GAhCUH,IAAMC,WAuCpBkB,E,iLAEF,OACE,yBAAKhB,UAAU,oBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,wBAAIA,UAAU,qBAAd,eAEF,uBAAGA,UAAU,QAAb,kBAGA,kBAAC,EAAD,Y,GAZeH,IAAMC,WAmBzBmB,E,iLAEF,OACE,yBAAKjB,UAAU,oBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,wBAAIA,UAAU,qBAAd,cAEF,uBAAGA,UAAU,QAAb,kBAGA,kBAAC,EAAD,Y,GAZcH,IAAMC,WCxIVoB,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2e15772a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub, faLinkedinIn, faInstagram } from '@fortawesome/free-brands-svg-icons';\r\n\r\nlibrary.add(faGithub, faLinkedinIn, faInstagram);\r\n\r\nexport default class App extends React.Component {\r\n  componentDidMount() {\r\n    document.title = \"Mesa Perry\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router basename=\"/\">\r\n        <Switch>\r\n          <Route path=\"/experience\">\r\n            <Experience />\r\n          </Route>\r\n          <Route path=\"/portfolio\">\r\n            <Portfolio />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <About />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nclass NavigationBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"horizontal\">\r\n        <Link className=\"text_color1 clickable navi_button\" to=\"/\">About</Link>\r\n        <Link className=\"text_color1 clickable navi_button\" to=\"/experience\">Experience</Link>\r\n        <Link className=\"text_color1 clickable navi_button\" to=\"/portfolio\">Portfolio</Link>\r\n        <a\r\n          className=\"text_color1 clickable navi_button\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href=\"https://drive.google.com/open?id=1gxt6W-gEsK1tu5ikDbddddwjn1tme1Rl\"\r\n        >Resume</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass SocialBar extends React.Component {\r\n  render() {\r\n    const { isOpen, onClose, message } = this.props;\r\n    return (\r\n      <div className=\"horizontal\">\r\n        <a href=\"https://github.com/mesperrus/\">\r\n          <FontAwesomeIcon\r\n            icon={['fab', 'github']}\r\n            size=\"3x\"\r\n            className=\"text_color1 clickable social_button\"\r\n          />\r\n        </a>\r\n        <a href=\"https://www.linkedin.com/in/mesa-perry-558715193/\">\r\n          <FontAwesomeIcon\r\n            icon={['fab', 'linkedin-in']}\r\n            size=\"3x\"\r\n            className=\"text_color1 clickable social_button\"\r\n          />\r\n        </a>\r\n        <a href=\"https://www.instagram.com/mesa.perry/\">\r\n          <FontAwesomeIcon\r\n            icon={['fab', 'instagram']}\r\n            size=\"3x\"\r\n            className=\"text_color1 clickable social_button\"\r\n          />\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass About extends React.Component {\r\n  render() {\r\n    const isMobile = window.innerWidth <= 720;\r\n\r\n    // if (!isMobile) {\r\n    //   document.getElementById(\"root\").style.justifyContent = \"start\";\r\n    // }\r\n    // else {\r\n    // }\r\n\r\n    return (\r\n      <div className=\"color1 container\">\r\n        <div className=\"color2 inner\">\r\n          <div className=\"vertical\">\r\n            <NavigationBar />\r\n            <h1 className=\"text_color1 title\">Mesa Perry</h1>\r\n          </div>\r\n          <p className=\"info\">\r\n            Heyo -- welcome to my abode!\r\n            I'm a student and software developer from\r\n            University of Illinois Urbana-Champaign.\r\n          </p>\r\n          <p className=\"info\">\r\n            My experience includes a deep learning internship at\r\n            ST Engineering and various personal projects.\r\n            Recently I participated in HackIllinois 2020 and\r\n            won first place for Checkbook's challenge.\r\n            This summer I'll be interning as a SDE intern\r\n            at Amazon Lab126.\r\n            Feel free to visit some of my work above,\r\n            or check me out on other sites below.\r\n          </p>\r\n          <SocialBar />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Experience extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"color1 container\">\r\n        <div className=\"color2 inner\">\r\n          <div className=\"vertical\">\r\n            <NavigationBar />\r\n            <h1 className=\"text_color1 title\">Experience</h1>\r\n          </div>\r\n          <p className=\"info\">\r\n            Coming soon...\r\n          </p>\r\n          <SocialBar />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Portfolio extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"color1 container\">\r\n        <div className=\"color2 inner\">\r\n          <div className=\"vertical\">\r\n            <NavigationBar />\r\n            <h1 className=\"text_color1 title\">Portfolio</h1>\r\n          </div>\r\n          <p className=\"info\">\r\n            Coming soon...\r\n          </p>\r\n          <SocialBar />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}